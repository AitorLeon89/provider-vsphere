/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FolderObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FolderParameters struct {

	// Map of custom attribute ids to attribute
	// value strings to set for folder. See here
	// for a reference on how to set values for custom attributes.
	// A list of custom attributes to set on this resource.
	// +kubebuilder:validation:Optional
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The ID of the datacenter the folder will be created in.
	// Required for all folder types except for datacenter folders. Forces a new
	// resource if changed.
	// The ID of the datacenter. Can be ignored if creating a datacenter folder, otherwise required.
	// +kubebuilder:validation:Optional
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// The path of the folder to be created. This is relative to
	// the root of the type of folder you are creating, and the supplied datacenter.
	// The path of the folder and any parents, relative to the datacenter and folder type being defined.
	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`

	// The IDs of any tags to attach to this resource. See
	// here for a reference on how to apply tags.
	// A list of tag IDs to apply to this object.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of folder to create. Allowed options are
	// datacenter for datacenter folders, host for host and cluster folders,
	// vm for virtual machine folders, datastore for datastore folders, and
	// network for network folders. Forces a new resource if changed.
	// The type of the folder.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// FolderSpec defines the desired state of Folder
type FolderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FolderParameters `json:"forProvider"`
}

// FolderStatus defines the observed state of Folder.
type FolderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FolderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Folder is the Schema for the Folders API. Provides a VMware vSphere folder resource. This can be used to manage vSphere inventory folders.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type Folder struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FolderSpec   `json:"spec"`
	Status            FolderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FolderList contains a list of Folders
type FolderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Folder `json:"items"`
}

// Repository type metadata.
var (
	Folder_Kind             = "Folder"
	Folder_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Folder_Kind}.String()
	Folder_KindAPIVersion   = Folder_Kind + "." + CRDGroupVersion.String()
	Folder_GroupVersionKind = CRDGroupVersion.WithKind(Folder_Kind)
)

func init() {
	SchemeBuilder.Register(&Folder{}, &FolderList{})
}
