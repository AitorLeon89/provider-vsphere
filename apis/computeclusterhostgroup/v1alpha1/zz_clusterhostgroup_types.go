/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterHostGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClusterHostGroupParameters struct {

	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	// The managed object ID of the cluster.
	// +kubebuilder:validation:Required
	ComputeClusterID *string `json:"computeClusterId" tf:"compute_cluster_id,omitempty"`

	// The managed object IDs of
	// the hosts to put in the cluster.
	// The managed object IDs of the hosts.
	// +kubebuilder:validation:Optional
	HostSystemIds []*string `json:"hostSystemIds,omitempty" tf:"host_system_ids,omitempty"`

	// The name of the host group. This must be unique in the
	// cluster. Forces a new resource if changed.
	// The unique name of the host group in the cluster.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// ClusterHostGroupSpec defines the desired state of ClusterHostGroup
type ClusterHostGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterHostGroupParameters `json:"forProvider"`
}

// ClusterHostGroupStatus defines the observed state of ClusterHostGroup.
type ClusterHostGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterHostGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterHostGroup is the Schema for the ClusterHostGroups API. Provides a VMware vSphere cluster virtual machine group. This can be used to manage groups of virtual machines for relevant rules in a cluster.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type ClusterHostGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterHostGroupSpec   `json:"spec"`
	Status            ClusterHostGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterHostGroupList contains a list of ClusterHostGroups
type ClusterHostGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterHostGroup `json:"items"`
}

// Repository type metadata.
var (
	ClusterHostGroup_Kind             = "ClusterHostGroup"
	ClusterHostGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterHostGroup_Kind}.String()
	ClusterHostGroup_KindAPIVersion   = ClusterHostGroup_Kind + "." + CRDGroupVersion.String()
	ClusterHostGroup_GroupVersionKind = CRDGroupVersion.WithKind(ClusterHostGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterHostGroup{}, &ClusterHostGroupList{})
}
