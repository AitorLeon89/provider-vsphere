/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CategoryObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CategoryParameters struct {

	// A list object types that this category is
	// valid to be assigned to. For a full list, click
	// here.
	// Object types to which this category's tags can be attached. Valid types include: Folder, ClusterComputeResource, Datacenter, Datastore, StoragePod, DistributedVirtualPortgroup, DistributedVirtualSwitch, VmwareDistributedVirtualSwitch, HostSystem, com.vmware.content.Library, com.vmware.content.library.Item, HostNetwork, Network, OpaqueNetwork, ResourcePool, VirtualApp, VirtualMachine.
	// +kubebuilder:validation:Required
	AssociableTypes []*string `json:"associableTypes" tf:"associable_types,omitempty"`

	// The number of tags that can be assigned from this
	// category to a single object at once. Can be one of SINGLE (object can only
	// be assigned one tag in this category), to MULTIPLE (object can be assigned
	// multiple tags in this category). Forces a new resource if changed.
	// The associated cardinality of the category. Can be one of SINGLE (object can only be assigned one tag in this category) or MULTIPLE (object can be assigned multiple tags in this category).
	// +kubebuilder:validation:Required
	Cardinality *string `json:"cardinality" tf:"cardinality,omitempty"`

	// A description for the category.
	// The description of the category.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`
}

// CategorySpec defines the desired state of Category
type CategorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CategoryParameters `json:"forProvider"`
}

// CategoryStatus defines the observed state of Category.
type CategoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CategoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Category is the Schema for the Categorys API. Provides a vSphere tag category resource. This can be used to manage tag categories in vSphere.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type Category struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CategorySpec   `json:"spec"`
	Status            CategoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CategoryList contains a list of Categorys
type CategoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Category `json:"items"`
}

// Repository type metadata.
var (
	Category_Kind             = "Category"
	Category_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Category_Kind}.String()
	Category_KindAPIVersion   = Category_Kind + "." + CRDGroupVersion.String()
	Category_GroupVersionKind = CRDGroupVersion.WithKind(Category_Kind)
)

func init() {
	SchemeBuilder.Register(&Category{}, &CategoryList{})
}
