/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LibraryObservation struct {

	// The managed object reference ID of the content library.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Options to publish a local content library.
	// Publication configuration for content library.
	// +kubebuilder:validation:Optional
	Publication []PublicationObservation `json:"publication,omitempty" tf:"publication,omitempty"`
}

type LibraryParameters struct {

	// A description for the content library.
	// Optional description of the content library.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the content library.
	// The name of the content library.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Options to publish a local content library.
	// Publication configuration for content library.
	// +kubebuilder:validation:Optional
	Publication []PublicationParameters `json:"publication,omitempty" tf:"publication,omitempty"`

	// The managed object reference ID of the datastore on which to store the content library items.
	// The name of the content library.
	// +kubebuilder:validation:Required
	StorageBacking []*string `json:"storageBacking" tf:"storage_backing,omitempty"`

	// Options subscribe to a published content library.
	// Publication configuration for content library.
	// +kubebuilder:validation:Optional
	Subscription []SubscriptionParameters `json:"subscription,omitempty" tf:"subscription,omitempty"`
}

type PublicationObservation struct {

	// The URL of the published content library.
	PublishURL *string `json:"publishUrl,omitempty" tf:"publish_url,omitempty"`
}

type PublicationParameters struct {

	// Method to authenticate users. Must be NONE or BASIC.
	// +kubebuilder:validation:Optional
	AuthenticationMethod *string `json:"authenticationMethod,omitempty" tf:"authentication_method,omitempty"`

	// Password used by subscribers to authenticate.
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// Publish the content library. Default false.
	// +kubebuilder:validation:Optional
	Published *bool `json:"published,omitempty" tf:"published,omitempty"`

	// Username used by subscribers to authenticate. Currently can only be vcsp.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SubscriptionObservation struct {
}

type SubscriptionParameters struct {

	// Method to authenticate users. Must be NONE or BASIC.
	// +kubebuilder:validation:Optional
	AuthenticationMethod *string `json:"authenticationMethod,omitempty" tf:"authentication_method,omitempty"`

	// Enable automatic synchronization with the published library. Default false.
	// +kubebuilder:validation:Optional
	AutomaticSync *bool `json:"automaticSync,omitempty" tf:"automatic_sync,omitempty"`

	// Download the library from a content only when needed. Default true.
	// +kubebuilder:validation:Optional
	OnDemand *bool `json:"onDemand,omitempty" tf:"on_demand,omitempty"`

	// Password used by subscribers to authenticate.
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// URL of the published content library.
	// +kubebuilder:validation:Optional
	SubscriptionURL *string `json:"subscriptionUrl,omitempty" tf:"subscription_url,omitempty"`

	// Username used by subscribers to authenticate. Currently can only be vcsp.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// LibrarySpec defines the desired state of Library
type LibrarySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LibraryParameters `json:"forProvider"`
}

// LibraryStatus defines the observed state of Library.
type LibraryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LibraryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Library is the Schema for the Librarys API. Provides a vSphere content cibrary. Content libraries allow you to manage and share virtual machines, vApp templates, and other types of files. Content libraries enable you to share content across vCenter Server instances in the same or different locations.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type Library struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LibrarySpec   `json:"spec"`
	Status            LibraryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LibraryList contains a list of Librarys
type LibraryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Library `json:"items"`
}

// Repository type metadata.
var (
	Library_Kind             = "Library"
	Library_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Library_Kind}.String()
	Library_KindAPIVersion   = Library_Kind + "." + CRDGroupVersion.String()
	Library_GroupVersionKind = CRDGroupVersion.WithKind(Library_Kind)
)

func init() {
	SchemeBuilder.Register(&Library{}, &LibraryList{})
}
