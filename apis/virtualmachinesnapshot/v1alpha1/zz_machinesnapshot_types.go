/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MachineSnapshotObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MachineSnapshotParameters struct {

	// If set to true, the delta disks involved in this
	// snapshot will be consolidated into the parent when this resource is
	// destroyed.
	// +kubebuilder:validation:Optional
	Consolidate *bool `json:"consolidate,omitempty" tf:"consolidate,omitempty"`

	// A description for the snapshot.
	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// If set to true, a dump of the internal state of the
	// virtual machine is included in the snapshot.
	// +kubebuilder:validation:Required
	Memory *bool `json:"memory" tf:"memory,omitempty"`

	// If set to true, and the virtual machine is powered
	// on when the snapshot is taken, VMware Tools is used to quiesce the file
	// system in the virtual machine.
	// +kubebuilder:validation:Required
	Quiesce *bool `json:"quiesce" tf:"quiesce,omitempty"`

	// If set to true, the entire snapshot subtree
	// is removed when this resource is destroyed.
	// +kubebuilder:validation:Optional
	RemoveChildren *bool `json:"removeChildren,omitempty" tf:"remove_children,omitempty"`

	// The name of the snapshot.
	// +kubebuilder:validation:Required
	SnapshotName *string `json:"snapshotName" tf:"snapshot_name,omitempty"`

	// The virtual machine UUID.
	// +kubebuilder:validation:Required
	VirtualMachineUUID *string `json:"virtualMachineUuid" tf:"virtual_machine_uuid,omitempty"`
}

// MachineSnapshotSpec defines the desired state of MachineSnapshot
type MachineSnapshotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MachineSnapshotParameters `json:"forProvider"`
}

// MachineSnapshotStatus defines the observed state of MachineSnapshot.
type MachineSnapshotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MachineSnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MachineSnapshot is the Schema for the MachineSnapshots API. Provides a VMware vSphere virtual machine snapshot resource. This can be used to create and delete virtual machine snapshots.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type MachineSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MachineSnapshotSpec   `json:"spec"`
	Status            MachineSnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MachineSnapshotList contains a list of MachineSnapshots
type MachineSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MachineSnapshot `json:"items"`
}

// Repository type metadata.
var (
	MachineSnapshot_Kind             = "MachineSnapshot"
	MachineSnapshot_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MachineSnapshot_Kind}.String()
	MachineSnapshot_KindAPIVersion   = MachineSnapshot_Kind + "." + CRDGroupVersion.String()
	MachineSnapshot_GroupVersionKind = CRDGroupVersion.WithKind(MachineSnapshot_Kind)
)

func init() {
	SchemeBuilder.Register(&MachineSnapshot{}, &MachineSnapshotList{})
}
