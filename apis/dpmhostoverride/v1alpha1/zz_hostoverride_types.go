/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HostOverrideObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HostOverrideParameters struct {

	// The managed object reference
	// ID of the cluster to put the override in.  Forces a new
	// resource if changed.
	// The managed object ID of the cluster.
	// +kubebuilder:validation:Required
	ComputeClusterID *string `json:"computeClusterId" tf:"compute_cluster_id,omitempty"`

	// The automation level for host power
	// operations on this host. Can be one of manual or automated. Default:
	// manual.
	// The automation level for power operations on this host. Can be one of manual or automated.
	// +kubebuilder:validation:Optional
	DpmAutomationLevel *string `json:"dpmAutomationLevel,omitempty" tf:"dpm_automation_level,omitempty"`

	// Enable DPM support for this host. Default:
	// false.
	// Enable DPM for this host.
	// +kubebuilder:validation:Optional
	DpmEnabled *bool `json:"dpmEnabled,omitempty" tf:"dpm_enabled,omitempty"`

	// The managed object ID of the host.
	// +kubebuilder:validation:Required
	HostSystemID *string `json:"hostSystemId" tf:"host_system_id,omitempty"`
}

// HostOverrideSpec defines the desired state of HostOverride
type HostOverrideSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HostOverrideParameters `json:"forProvider"`
}

// HostOverrideStatus defines the observed state of HostOverride.
type HostOverrideStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HostOverrideObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HostOverride is the Schema for the HostOverrides API. Provides a VMware vSphere DPM host override resource. This can be used to override power management settings for a host in a cluster.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type HostOverride struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HostOverrideSpec   `json:"spec"`
	Status            HostOverrideStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HostOverrideList contains a list of HostOverrides
type HostOverrideList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HostOverride `json:"items"`
}

// Repository type metadata.
var (
	HostOverride_Kind             = "HostOverride"
	HostOverride_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HostOverride_Kind}.String()
	HostOverride_KindAPIVersion   = HostOverride_Kind + "." + CRDGroupVersion.String()
	HostOverride_GroupVersionKind = CRDGroupVersion.WithKind(HostOverride_Kind)
)

func init() {
	SchemeBuilder.Register(&HostOverride{}, &HostOverrideList{})
}
