/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VMOverrideObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VMOverrideParameters struct {

	// The managed object reference
	// ID of the cluster to put the override in.  Forces a new
	// resource if changed.
	// The managed object ID of the cluster.
	// +kubebuilder:validation:Required
	ComputeClusterID *string `json:"computeClusterId" tf:"compute_cluster_id,omitempty"`

	// Overrides the automation level for this virtual
	// machine in the cluster. Can be one of manual, partiallyAutomated, or
	// fullyAutomated. Default: manual.
	// The automation level for this virtual machine in the cluster. Can be one of manual, partiallyAutomated, or fullyAutomated.
	// +kubebuilder:validation:Optional
	DrsAutomationLevel *string `json:"drsAutomationLevel,omitempty" tf:"drs_automation_level,omitempty"`

	// Overrides the default DRS setting for this virtual
	// machine. Can be either true or false. Default: false.
	// Enable DRS for this virtual machine.
	// +kubebuilder:validation:Optional
	DrsEnabled *bool `json:"drsEnabled,omitempty" tf:"drs_enabled,omitempty"`

	// The UUID of the virtual machine to create
	// the override for.  Forces a new resource if changed.
	// The managed object ID of the virtual machine.
	// +kubebuilder:validation:Required
	VirtualMachineID *string `json:"virtualMachineId" tf:"virtual_machine_id,omitempty"`
}

// VMOverrideSpec defines the desired state of VMOverride
type VMOverrideSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VMOverrideParameters `json:"forProvider"`
}

// VMOverrideStatus defines the observed state of VMOverride.
type VMOverrideStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VMOverrideObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VMOverride is the Schema for the VMOverrides API. Provides a VMware vSphere DRS virtual machine override resource. This can be used to override DRS settings in a cluster.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VMOverride struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VMOverrideSpec   `json:"spec"`
	Status            VMOverrideStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VMOverrideList contains a list of VMOverrides
type VMOverrideList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VMOverride `json:"items"`
}

// Repository type metadata.
var (
	VMOverride_Kind             = "VMOverride"
	VMOverride_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VMOverride_Kind}.String()
	VMOverride_KindAPIVersion   = VMOverride_Kind + "." + CRDGroupVersion.String()
	VMOverride_GroupVersionKind = CRDGroupVersion.WithKind(VMOverride_Kind)
)

func init() {
	SchemeBuilder.Register(&VMOverride{}, &VMOverrideList{})
}
