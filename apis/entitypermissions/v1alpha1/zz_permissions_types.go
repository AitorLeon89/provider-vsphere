/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PermissionsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PermissionsParameters struct {

	// The managed object id or uuid of the entity.
	// +kubebuilder:validation:Required
	EntityID *string `json:"entityId" tf:"entity_id,omitempty"`

	// The entity managed object type.
	// +kubebuilder:validation:Required
	EntityType *string `json:"entityType" tf:"entity_type,omitempty"`

	// Permissions to be given to the entity.
	// +kubebuilder:validation:Required
	Permissions []PermissionsPermissionsParameters `json:"permissions" tf:"permissions,omitempty"`
}

type PermissionsPermissionsObservation struct {
}

type PermissionsPermissionsParameters struct {

	// Whether user_or_group field refers to a user or a group. True for a group and false for a user.
	// +kubebuilder:validation:Required
	IsGroup *bool `json:"isGroup" tf:"is_group,omitempty"`

	// Whether or not this permission propagates down the hierarchy to sub-entities.
	// +kubebuilder:validation:Required
	Propagate *bool `json:"propagate" tf:"propagate,omitempty"`

	// Reference to the role providing the access.
	// +kubebuilder:validation:Required
	RoleID *string `json:"roleId" tf:"role_id,omitempty"`

	// User or group receiving access.
	// +kubebuilder:validation:Required
	UserOrGroup *string `json:"userOrGroup" tf:"user_or_group,omitempty"`
}

// PermissionsSpec defines the desired state of Permissions
type PermissionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PermissionsParameters `json:"forProvider"`
}

// PermissionsStatus defines the observed state of Permissions.
type PermissionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PermissionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Permissions is the Schema for the Permissionss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type Permissions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PermissionsSpec   `json:"spec"`
	Status            PermissionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PermissionsList contains a list of Permissionss
type PermissionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Permissions `json:"items"`
}

// Repository type metadata.
var (
	Permissions_Kind             = "Permissions"
	Permissions_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Permissions_Kind}.String()
	Permissions_KindAPIVersion   = Permissions_Kind + "." + CRDGroupVersion.String()
	Permissions_GroupVersionKind = CRDGroupVersion.WithKind(Permissions_Kind)
)

func init() {
	SchemeBuilder.Register(&Permissions{}, &PermissionsList{})
}
