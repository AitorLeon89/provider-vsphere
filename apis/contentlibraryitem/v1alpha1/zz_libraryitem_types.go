/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LibraryItemObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type LibraryItemParameters struct {

	// A description for the content library item.
	// Optional description of the content library item.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// File to import as the content library item.
	// ID of source VM of content library item.
	// +kubebuilder:validation:Optional
	FileURL *string `json:"fileUrl,omitempty" tf:"file_url,omitempty"`

	// The ID of the content library in which to create the item.
	// ID of the content library to contain item
	// +kubebuilder:validation:Required
	LibraryID *string `json:"libraryId" tf:"library_id,omitempty"`

	// The name of the item to be created in the content library.
	// The name of the content library item.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Virtual machine UUID to clone to content library.
	// The managed object ID of an existing VM to be cloned to the content library.
	// +kubebuilder:validation:Optional
	SourceUUID *string `json:"sourceUuid,omitempty" tf:"source_uuid,omitempty"`

	// Type of content library item.
	// One of "ovf", "iso", or "vm-template". Default: ovf.
	// Type of content library item.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// LibraryItemSpec defines the desired state of LibraryItem
type LibraryItemSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LibraryItemParameters `json:"forProvider"`
}

// LibraryItemStatus defines the observed state of LibraryItem.
type LibraryItemStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LibraryItemObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LibraryItem is the Schema for the LibraryItems API. Creates an item in a vSphere content library. Each item can contain multiple files.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type LibraryItem struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LibraryItemSpec   `json:"spec"`
	Status            LibraryItemStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LibraryItemList contains a list of LibraryItems
type LibraryItemList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LibraryItem `json:"items"`
}

// Repository type metadata.
var (
	LibraryItem_Kind             = "LibraryItem"
	LibraryItem_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LibraryItem_Kind}.String()
	LibraryItem_KindAPIVersion   = LibraryItem_Kind + "." + CRDGroupVersion.String()
	LibraryItem_GroupVersionKind = CRDGroupVersion.WithKind(LibraryItem_Kind)
)

func init() {
	SchemeBuilder.Register(&LibraryItem{}, &LibraryItemList{})
}
