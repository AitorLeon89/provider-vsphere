/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterVMDependencyRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClusterVMDependencyRuleParameters struct {

	// The managed object reference
	// ID of the cluster to put the group in.  Forces a new
	// resource if changed.
	// The managed object ID of the cluster.
	// +kubebuilder:validation:Required
	ComputeClusterID *string `json:"computeClusterId" tf:"compute_cluster_id,omitempty"`

	// The name of the VM group that this
	// rule depends on. The VMs defined in the group specified by
	// vm_group_name will not be started until the VMs in this
	// group are started.
	// The name of the VM group that this rule depends on. The VMs defined in the group specified by vm_group_name will not be started until the VMs in this group are started.
	// +kubebuilder:validation:Required
	DependencyVMGroupName *string `json:"dependencyVmGroupName" tf:"dependency_vm_group_name,omitempty"`

	// Enable this rule in the cluster. Default: true.
	// Enable this rule in the cluster.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// When this value is true, prevents any virtual
	// machine operations that may violate this rule. Default: false.
	// When true, prevents any virtual machine operations that may violate this rule.
	// +kubebuilder:validation:Optional
	Mandatory *bool `json:"mandatory,omitempty" tf:"mandatory,omitempty"`

	// The name of the rule. This must be unique in the
	// cluster.
	// The unique name of the virtual machine group in the cluster.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The name of the VM group that is the subject of
	// this rule. The VMs defined in this group will not be started until the VMs in
	// the group specified by
	// dependency_vm_group_name are started.
	// The name of the VM group that is the subject of this rule. The VMs defined in this group will not be started until the VMs in the group specified by dependency_vm_group_name are started.
	// +kubebuilder:validation:Required
	VMGroupName *string `json:"vmGroupName" tf:"vm_group_name,omitempty"`
}

// ClusterVMDependencyRuleSpec defines the desired state of ClusterVMDependencyRule
type ClusterVMDependencyRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterVMDependencyRuleParameters `json:"forProvider"`
}

// ClusterVMDependencyRuleStatus defines the observed state of ClusterVMDependencyRule.
type ClusterVMDependencyRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterVMDependencyRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterVMDependencyRule is the Schema for the ClusterVMDependencyRules API. Provides a VMware vSphere cluster VM dependency rule. This can be used to manage VM dependency rules for vSphere HA.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type ClusterVMDependencyRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterVMDependencyRuleSpec   `json:"spec"`
	Status            ClusterVMDependencyRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterVMDependencyRuleList contains a list of ClusterVMDependencyRules
type ClusterVMDependencyRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterVMDependencyRule `json:"items"`
}

// Repository type metadata.
var (
	ClusterVMDependencyRule_Kind             = "ClusterVMDependencyRule"
	ClusterVMDependencyRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterVMDependencyRule_Kind}.String()
	ClusterVMDependencyRule_KindAPIVersion   = ClusterVMDependencyRule_Kind + "." + CRDGroupVersion.String()
	ClusterVMDependencyRule_GroupVersionKind = CRDGroupVersion.WithKind(ClusterVMDependencyRule_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterVMDependencyRule{}, &ClusterVMDependencyRuleList{})
}
